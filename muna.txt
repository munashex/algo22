1.big o natation is a language we use to scale to complexity and memory complexity of an algorithm 
2.0(1) it takes same to time to run an algorithm with different space  

function findIndexBro(n: number[]): number {
    let x = n[2] 
     return x
}

console.log(findIndexBro([1, 3, 4, 5])) here is example of big 0 of 1 which is constant time complexity

In programming, a lot of operations are constant. Here are some examples:

math operations
accessing an array via the index
accessing a hash via the key
pushing and popping on a stack
insertion and removal from a queue
returning a value from a function  


Binary Search Below 

function binarySeaarch(arr: number[], target: number): any{
    let start = 0 
    let end = arr.length -1 


    while(start <= end) {
        let middle = Math.floor((start + end) / 2) 

        if(arr[middle] === target) {
            return null
        }else if(arr[middle] > target) {
            end = middle - 1
        }else if(arr[middle] < target) {
           start = middle + 1
        }
    }
    return -1 
}

console.log(binarySeaarch([1, 2, 3, 4, 5], 3))   


bubble Sort 
function BubbleSort(arr) {

  for(let i = arr.length - 1; i > 0; i--) {
    for(let j = 0; j < i; j++) {

      if(arr[j] > arr[j + 1]) {
        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]] 
      }
    }
  }
  return arr
} 
 
console.log(BubbleSort([5, 3, 1, 2, 4])) 


quick sort  
pivotValue = arr[start] = [0]  
swapIndex = starting from 0 to end  
[0] > [remaining values] 
we keep tracts of all elements in array  
